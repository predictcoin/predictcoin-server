/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAddressSet = ContractEventLog<{
  _address: string;
  0: string;
}>;
export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SportEventAdded = ContractEventLog<{
  _eventId: string;
  _teamA: string;
  _teamB: string;
  _league: string;
  _round: string;
  _startTimestamp: string;
  _endTimestamp: string;
  _season: string;
  _realTeamAScore: string;
  _realTeamBScore: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
  9: string;
}>;
export type SportEventCancelled = ContractEventLog<{
  _eventId: string;
  0: string;
}>;
export type SportEventDeclared = ContractEventLog<{
  _eventId: string;
  _teamA: string;
  _teamB: string;
  _realTeamAScore: string;
  _realTeamBScore: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;

export interface BscSportOracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BscSportOracle;
  clone(): BscSportOracle;
  methods: {
    addSportEvent(
      _teamA: string,
      _teamB: string,
      _league: string,
      _round: string,
      _startTimestamp: number | string | BN,
      _endTimestamp: number | string | BN,
      _season: number | string | BN
    ): NonPayableTransactionObject<string>;

    addSportEvents(
      _teamAs: string[],
      _teamBs: string[],
      _leagues: string[],
      _rounds: string[],
      _startTimestamps: (number | string | BN)[],
      _endTimestamps: (number | string | BN)[],
      _seasons: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    adminAddress(): NonPayableTransactionObject<string>;

    cancelSportEvents(
      _eventIds: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    declareOutcome(
      _eventId: string | number[],
      _realTeamAScore: number | string | BN,
      _realTeamBScore: number | string | BN
    ): NonPayableTransactionObject<void>;

    declareOutcomes(
      _eventIds: (string | number[])[],
      _realTeamAScores: (number | string | BN)[],
      _realTeamBScores: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    eventExists(
      _eventId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    getAllEvents(
      cursor: number | string | BN,
      length: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getEvents(
      eventIds: (string | number[])[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getEventsLength(): NonPayableTransactionObject<string>;

    getIndexedEvents(
      indexes: (number | string | BN)[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getLiveEvents(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    getPendingEvents(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ][]
    >;

    initialize(_adminAddress: string): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAdminAddress(_adminAddress: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateSportEvents(
      _eventIds: (string | number[])[],
      _startTimestamps: (number | string | BN)[],
      _endTimestamps: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[]
    ): PayableTransactionObject<void>;
  };
  events: {
    AdminAddressSet(cb?: Callback<AdminAddressSet>): EventEmitter;
    AdminAddressSet(
      options?: EventOptions,
      cb?: Callback<AdminAddressSet>
    ): EventEmitter;

    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SportEventAdded(cb?: Callback<SportEventAdded>): EventEmitter;
    SportEventAdded(
      options?: EventOptions,
      cb?: Callback<SportEventAdded>
    ): EventEmitter;

    SportEventCancelled(cb?: Callback<SportEventCancelled>): EventEmitter;
    SportEventCancelled(
      options?: EventOptions,
      cb?: Callback<SportEventCancelled>
    ): EventEmitter;

    SportEventDeclared(cb?: Callback<SportEventDeclared>): EventEmitter;
    SportEventDeclared(
      options?: EventOptions,
      cb?: Callback<SportEventDeclared>
    ): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAddressSet", cb: Callback<AdminAddressSet>): void;
  once(
    event: "AdminAddressSet",
    options: EventOptions,
    cb: Callback<AdminAddressSet>
  ): void;

  once(event: "AdminChanged", cb: Callback<AdminChanged>): void;
  once(
    event: "AdminChanged",
    options: EventOptions,
    cb: Callback<AdminChanged>
  ): void;

  once(event: "BeaconUpgraded", cb: Callback<BeaconUpgraded>): void;
  once(
    event: "BeaconUpgraded",
    options: EventOptions,
    cb: Callback<BeaconUpgraded>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SportEventAdded", cb: Callback<SportEventAdded>): void;
  once(
    event: "SportEventAdded",
    options: EventOptions,
    cb: Callback<SportEventAdded>
  ): void;

  once(event: "SportEventCancelled", cb: Callback<SportEventCancelled>): void;
  once(
    event: "SportEventCancelled",
    options: EventOptions,
    cb: Callback<SportEventCancelled>
  ): void;

  once(event: "SportEventDeclared", cb: Callback<SportEventDeclared>): void;
  once(
    event: "SportEventDeclared",
    options: EventOptions,
    cb: Callback<SportEventDeclared>
  ): void;

  once(event: "Upgraded", cb: Callback<Upgraded>): void;
  once(event: "Upgraded", options: EventOptions, cb: Callback<Upgraded>): void;
}
